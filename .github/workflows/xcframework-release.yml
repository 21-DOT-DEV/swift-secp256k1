


name: XCFramework Release
on:
  release:
    types: [published]
jobs:
  macos:
    name: Build XCFramework
    runs-on: macos-15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      # - name: Install Swift 6.0.3
      #   run: |
      #     # Install Swift 6.0.3 - https://download.swift.org/swift-6.0.3-release/xcode/swift-6.0.3-RELEASE/swift-6.0.3-RELEASE-osx.pkg
      #     SWIFT_VERSION=6.0.3
      #     SWIFT_URL="https://download.swift.org/swift-$SWIFT_VERSION-release/xcode/swift-$SWIFT_VERSION-RELEASE/swift-$SWIFT_VERSION-RELEASE-osx.pkg"
      #     curl -O $SWIFT_URL
      #     sudo installer -pkg swift-$SWIFT_VERSION-RELEASE-osx.pkg -target /

      #     # Update the PATH for all subsequent steps
      #     echo "/Library/Developer/Toolchains/swift-$SWIFT_VERSION-RELEASE.xctoolchain/usr/bin" >> $GITHUB_PATH
      - name: Verify Swift installation
        run: |
          echo "Swift version:"
          which swift
          swift --version
      - name: Generate Xcode project
        run: swift package --disable-sandbox tuist generate -p Projects/ --no-open
      - name: Archive & Create XCFramework
        run: |
            # Define workspace and scheme
            WORKSPACE='Projects/XCFramework.xcworkspace'
            SCHEME='P256K'
            CONFIGURATION='Release'
            ARCHIVE_DIR='Archives'

            # Platforms to archive
            PLATFORMS=(
              "iOS"
              "iOS Simulator"
              "macOS"
              "tvOS"
              "tvOS Simulator"
              "watchOS"
              "watchOS Simulator"
              "visionOS"
            )

            # Loop over platforms and archive for each one
            for PLATFORM in "${PLATFORMS[@]}"; do
              echo "Archiving for $PLATFORM..."

              # Run xcodebuild archive for each platform
              xcodebuild archive \
                -workspace "$WORKSPACE" \
                -scheme "$SCHEME" \
                -configuration "$CONFIGURATION" \
                -destination "generic/platform=$PLATFORM" \
                -archivePath "$ARCHIVE_DIR/P256K-$PLATFORM.xcarchive"

              # Check if archive command was successful
              if [ $? -eq 0 ]; then
                echo "$PLATFORM archive created successfully."
              else
                echo "Failed to archive for $PLATFORM. Exiting."
                exit 1
              fi
            done

            echo "All archives completed successfully."

            # Create an XCFramework to support multiple platforms and architectures
            # Each -archive parameter specifies a path to a .xcarchive built for a different platform
            # -framework specifies the framework within those archives to include in the XCFramework
            # The -output parameter specifies the name and location of the XCFramework to be created
            xcodebuild -create-xcframework \
              -archive "Archives/P256K-iOS.xcarchive" -framework P256K.framework \
              -archive "Archives/P256K-iOS Simulator.xcarchive" -framework P256K.framework \
              -archive "Archives/P256K-macOS.xcarchive" -framework P256K.framework \
              -archive "Archives/P256K-tvOS.xcarchive" -framework P256K.framework \
              -archive "Archives/P256K-tvOS Simulator.xcarchive" -framework P256K.framework \
              -archive "Archives/P256K-watchOS.xcarchive" -framework P256K.framework \
              -archive "Archives/P256K-watchOS Simulator.xcarchive" -framework P256K.framework \
              -output P256K.xcframework
      - name: 7z XCFramework
        run: |
          7z a -tzip -mx=9 P256K.xcframework.zip P256K.xcframework
      - name: Upload XCFramework
        run: |
            gh release upload ${{ github.ref_name }} P256K.xcframework.zip