name: XCFramework Release
on:
  release:
    types: [published]
jobs:
  macos:
    name: Build XCFramework
    runs-on: macos-15
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Generate Xcode project
        run: swift package --disable-sandbox tuist generate -p Projects/ --no-open
      - name: Archive & Create XCFramework
        run: |
            # Define workspace and scheme
            WORKSPACE='Projects/XCFramework.xcworkspace'
            SCHEME='P256K'
            CONFIGURATION='Release'
            ARCHIVE_DIR='Archives'

            # Platforms to archive
            PLATFORMS=(
              "iOS"
              "iOS Simulator"
              "macOS"
              "tvOS"
              "tvOS Simulator"
              "watchOS"
              "watchOS Simulator"
            # "visionOS"
            # "XR Simulator"
            )

            # Loop over platforms and archive for each one
            for PLATFORM in "${PLATFORMS[@]}"; do
              echo "Archiving for $PLATFORM..."

              # Run xcodebuild archive for each platform
              xcodebuild archive \
                -workspace "$WORKSPACE" \
                -scheme "$SCHEME" \
                -configuration "$CONFIGURATION" \
                -destination "generic/platform=$PLATFORM" \
                -archivePath "$ARCHIVE_DIR/P256K-$PLATFORM.xcarchive"

              # Check if archive command was successful
              if [ $? -eq 0 ]; then
                echo "$PLATFORM archive created successfully."
              else
                echo "Failed to archive for $PLATFORM. Exiting."
                exit 1
              fi
            done

            echo "All archives completed successfully."

            # Create an XCFramework to support multiple platforms and architectures
            # Each -archive parameter specifies a path to a .xcarchive built for a different platform
            # -framework specifies the framework within those archives to include in the XCFramework
            # The -output parameter specifies the name and location of the XCFramework to be created
            xcodebuild -create-xcframework \
              -archive "Archives/P256K-iOS.xcarchive" -framework P256K.framework \
              -archive "Archives/P256K-iOS Simulator.xcarchive" -framework P256K.framework \
              -archive "Archives/P256K-macOS.xcarchive" -framework P256K.framework \
              -archive "Archives/P256K-tvOS.xcarchive" -framework P256K.framework \
              -archive "Archives/P256K-tvOS Simulator.xcarchive" -framework P256K.framework \
              -archive "Archives/P256K-watchOS.xcarchive" -framework P256K.framework \
              -archive "Archives/P256K-watchOS Simulator.xcarchive" -framework P256K.framework \
              -output P256K.xcframework

            # Workaround for Swift issue SR-14195/GitHub #56573:
            # When a module has the same name as a type it contains (P256K in this case),
            # Swift generates invalid module interfaces with incorrect type qualifications.
            # This leads to imports failing with errors like:
            # "TypeName is not a member type of class ModuleName.ModuleName"
            #
            # This script fixes generated .swiftinterface files by:
            # 1. Removing double-qualification of the P256K type
            # 2. Fixing references to other types that don't need module qualification
            # See: https://github.com/swiftlang/swift/issues/56573
            find P256K.xcframework -name '*.swiftinterface' -print0 \
              | xargs -0 sed -i '' \
                  -e 's/extension P256K\.P256K/extension P256K/g' \
                  -e 's/P256K\.P256K\./P256K\./g' \
                  -e 's/[[:<:]]P256K\.secp256k1Error[[:>:]]/secp256k1Error/g' \
                  -e 's/[[:<:]]P256K\.Digest[[:>:]]/Digest/g' \
                  -e 's/[[:<:]]P256K\.CryptoKitError[[:>:]]/CryptoKitError/g' \
                  -e 's/[[:<:]]P256K\.CryptoKitASN1Error[[:>:]]/CryptoKitASN1Error/g' \
                  -e 's/[[:<:]]P256K\.SHA256Digest[[:>:]]/SHA256Digest/g' \
                  -e 's/[[:<:]]P256K\.XonlyKeyImplementation[[:>:]]/XonlyKeyImplementation/g' \
                  -e 's/[[:<:]]P256K\.HashDigest[[:>:]]/HashDigest/g' \
                  -e 's/[[:<:]]P256K\.SharedSecret[[:>:]]/SharedSecret/g' \
                  -e 's/[[:<:]]P256K\.PublicKeyImplementation[[:>:]]/PublicKeyImplementation/g' \
                  -e 's/[[:<:]]P256K\.PrivateKeyImplementation[[:>:]]/PrivateKeyImplementation/g' \
                  -e 's/[[:<:]]P256K\.UInt256[[:>:]]/UInt256/g' \
                  -e 's/[[:<:]]P256K\.Int256[[:>:]]/Int256/g' \
                  -e 's/[[:<:]]P256K\.UInt128[[:>:]]/UInt128/g' \
                  -e 's/[[:<:]]P256K\.Int128[[:>:]]/Int128/g' \
                  -e 's/[[:<:]]P256K\.SIMDWordsInteger[[:>:]]/SIMDWordsInteger/g' \
                  -e 's/[[:<:]]P256K\.SIMDWrapper[[:>:]]/SIMDWrapper/g' \
                  -e 's/[[:<:]]P256K\.Vector[[:>:]]/Vector/g'
      - name: 7z XCFramework
        run: |
          # Copy COPYING file to current directory to avoid including folder structure
          cp "Submodules/secp256k1/COPYING" "COPYING-libsecp256k1"
          # Create zip with maximum compression including license files alongside the XCFramework
          7z a -tzip -mx=9 P256K.xcframework.zip P256K.xcframework LICENSE "COPYING-libsecp256k1"
      - name: Upload XCFramework
        run: |
          gh release upload ${{ github.ref_name }} P256K.xcframework.zip
      - name: Deploy to Cocoapods
        run: |
          # Install Cocoapods
          gem install cocoapods

          # Get the current release tag name (version) from GitHub
          # This ensures the podspec uses the same version as the GitHub release
          export POD_VERSION=$(gh release list -R 21-DOT-DEV/swift-secp256k1 -L 1 --json tagName --jq '.[0].tagName')
          
          # Calculate SHA256 checksum of the XCFramework zip file
          # CocoaPods requires this hash for security verification when downloading the binary
          export XCFRAMEWORK_SHA=$(shasum -a 256 P256K.xcframework.zip | awk '{print $1}')
          
          # Validate the podspec using the environment variables set above
          # This checks that the podspec is valid before attempting to publish
          pod spec lint Projects/swift-secp256k1.podspec
          
          # Push the podspec to the CocoaPods Trunk service
          # This publishes the new version of the pod to the CocoaPods registry
          pod trunk push Projects/swift-secp256k1.podspec
        env:
          COCOAPODS_TRUNK_TOKEN: ${{ secrets.COCOAPODS_TRUNK_TOKEN }}