//
// Debug.xcconfig
//
// Generated by BuildSettingExtractor on 1/22/25
// https://buildsettingextractor.com
//


//********************************************//
//*              Architectures               *//
//********************************************//


// Base SDK
//
// The name or path of the base SDK being used during the build. The product will be
// built against the headers and libraries located inside the indicated SDK. This path
// will be prepended to all search paths, and will be passed through the environment to
// the compiler and linker. Additional SDKs can be specified in the `ADDITIONAL_SDKS`
// setting.

//SDKROOT = auto >>> Defined in Project.swift


// Supported Platforms
//
// The list of supported platforms from which a base SDK can be used. This setting is
// used if the product can be built for multiple platforms using different SDKs.

//SUPPORTED_PLATFORMS = iphoneos iphonesimulator macosx xros xrsimulator


// Product Name
//
// This is the basename of the product generated by the target.
//
// When `GENERATE_INFOPLIST_FILE` is enabled, sets the value of the
// [CFBundleName](https://developer.apple.com/documentation/bundleresources/information_property_list/cfbundlename)
// key in the `Info.plist` file to the value of this build setting.

//PRODUCT_NAME = $(TARGET_NAME:c99extidentifier)


// Build Active Architecture Only
//
// If enabled, only the active architecture is built. This setting will be ignored when
// building with a run destination which does not define a specific architecture, such as
// a 'Generic Device' run destination.

//ONLY_ACTIVE_ARCH = YES


//********************************************//
//*              Build Options               *//
//********************************************//


// Allow Multi-Platform Builds
// 
// If enabled, allows targets to build multiple times within a single build operation.
// Targets will build for the platform of the active run destination, as well as the
// platforms of any targets which depend on them.

//ALLOW_TARGET_PLATFORM_SPECIALIZATION = YES


// Build Libraries for Distribution
// 
// Ensures that your libraries are built for distribution. For Swift, this enables
// support for library evolution and generation of a module interface file.

//BUILD_LIBRARY_FOR_DISTRIBUTION = YES


// Debug Information Format
// 
// The type of debug information to produce.
// 
// * DWARF: Object files and linked products will use DWARF as the debug information
// format. [dwarf]
// * DWARF with dSYM File: Object files and linked products will use DWARF as the debug
// information format, and Xcode will also produce a dSYM file containing the debug
// information from the individual object files (except that a dSYM file is not needed
// and will not be created for static library or object file products). [dwarf-with-dsym]

//DEBUG_INFORMATION_FORMAT = dwarf


// Enable Testability
// 
// Enabling this setting will build the target with options appropriate for running
// automated tests against its product.
// 
// This setting can be enabled when building targets for debugging if their products will
// be tested. This may result in tests running slower than otherwise.
// 
// When this setting is enabled:
// 
// * `GCC_SYMBOLS_PRIVATE_EXTERN` is disabled (`-fvisibility=hidden` will not be passed
// to `clang`).
// * `-enable-testing` is passed to the Swift compiler.
// * `-export_dynamic` is passed to the linker.
// * `STRIP_INSTALLED_PRODUCT` is disabled (`strip` will not be run on the produced
// binary).

//ENABLE_TESTABILITY = YES


// User Script Sandboxing
// 
// If enabled, the build system will sandbox user scripts to disallow undeclared
// input/output dependencies.

//ENABLE_USER_SCRIPT_SANDBOXING = YES


//********************************************//
//*             Linking General              *//
//********************************************//


// Generate Position-Independent Executable (PIE)
//
// When enabled, the linker produces a position-independent executable (PIE).
// PIE executables have address space layout randomization (ASLR) enabled, which
// enhances security by randomizing the memory addresses used by the program,
// making it more difficult for attackers to predict the location of specific
// functions within the code. Setting this to `NO` means the resulting executable
// will not be position-independent.

//LD_NO_PIE = NO


// Generate Position-Dependent Code
// 
// Faster function calls for applications. Not appropriate for shared libraries, which
// need to be position-independent.

//GCC_DYNAMIC_NO_PIC = YES


// Runpath Search Paths
// 
// This is a list of paths to be added to the `runpath` search path list for the image
// being created. At runtime, `dyld` uses the `runpath` when searching for dylibs whose
// load path begins with `@rpath/`. See [Dynamic Library Programming
// Topics](https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/DynamicLibraries/000-Introduction/Introduction.html).

//LD_RUNPATH_SEARCH_PATHS = @executable_path/Frameworks @loader_path/Frameworks
//LD_RUNPATH_SEARCH_PATHS[sdk=macosx*] = @executable_path/../Frameworks @loader_path/Frameworks


//********************************************//
//*              Localization                *//
//********************************************//


// Localization Prefers String Catalogs
// 
// When enabled, string tables generated in a localization export will prefer the String
// Catalog format.

//LOCALIZATION_PREFERS_STRING_CATALOGS = YES


// Use Compiler to Extract Swift Strings
// 
// When enabled, the Swift compiler will be used to extract Swift string literal and
// interpolation `LocalizedStringKey` and `LocalizationKey` types during localization
// export.

//SWIFT_EMIT_LOC_STRINGS = YES


//********************************************//
//*               Packaging                  *//
//********************************************//


// Generate Info.plist File
// 
// If enabled, automatically generate an Info.plist file with content from build
// settings, and from content in the file pointed to by `INFOPLIST_FILE`, if defined.

//GENERATE_INFOPLIST_FILE = YES


//********************************************//
//*               Versioning                 *//
//********************************************//


// Marketing Version
// 
// This setting defines the user-visible version of the project.
// 
// When `GENERATE_INFOPLIST_FILE` is enabled, sets the value of the
// [CFBundleShortVersionString](https://developer.apple.com/documentation/bundleresources/information_property_list/cfbundleshortversionstring)
// key in the `Info.plist` file to the value of this build setting.

//MARKETING_VERSION = 1.0


// VERSION_INFO_FILE = 


//********************************************//
//*      Apple Clang - Code Generation       *//
//********************************************//


// Generate Position-Dependent Code
// 
// Faster function calls for applications. Not appropriate for shared libraries, which
// need to be position-independent.

//GCC_DYNAMIC_NO_PIC = YES


// Optimization Level
// 
// Specifies the degree to which the generated code is optimized for speed and binary
// size.
// 
// * None: Do not optimize. [-O0]
// With this setting, the compiler's goal is to reduce the cost of compilation and to
// make debugging produce the expected results. Statements are independentâ€”if you stop
// the program with a breakpoint between statements, you can then assign a new value to
// any variable or change the program counter to any other statement in the function and
// get exactly the results you would expect from the source code.
// * Fast: Optimizing compilation takes somewhat more time, and a lot more memory for a
// large function. [-O1]
// With this setting, the compiler tries to reduce code size and execution time,
// without performing any optimizations that take a great deal of compilation time. In
// Apple's compiler, strict aliasing, block reordering, and inter-block scheduling are
// disabled by default when optimizing.
// * Faster: The compiler performs nearly all supported optimizations that do not
// involve a space-speed tradeoff. [-O2]
// With this setting, the compiler does not perform loop unrolling or function
// inlining, or register renaming. As compared to the `Fast` setting, this setting
// increases both compilation time and the performance of the generated code.
// * Fastest: Turns on all optimizations specified by the `Faster` setting and also
// turns on function inlining and register renaming options. This setting may result in a
// larger binary. [-O3]
// * Fastest, Smallest: Optimize for size. This setting enables all `Faster`
// optimizations that do not typically increase code size. It also performs further
// optimizations designed to reduce code size. [-Os]
// * Fastest, Aggressive Optimizations: This setting enables `Fastest` but also enables
// aggressive optimizations that may break strict standards compliance but should work
// well on well-behaved code. [-Ofast]
// * Smallest, Aggressive Size Optimizations: This setting enables additional size
// savings by isolating repetitive code patterns into a compiler generated function.
// [-Oz]

//GCC_OPTIMIZATION_LEVEL = 0


//********************************************//
//*          Apple Clang - Language          *//
//********************************************//


// C Language Dialect
// 
// Choose a standard or non-standard C language dialect.
// 
// * ANSI C: Accept ISO C90 and ISO C++, turning off GNU extensions that are
// incompatible. [-ansi]
// Incompatible GNU extensions include the `asm`, `inline`, and `typeof` keywords (but
// not the equivalent `__asm__`, `__inline__`, and `__typeof__` forms), and the `//`
// syntax for comments.
// This setting also enables trigraphs.
// * C89: Accept ISO C90 (1990), but not GNU extensions. [-std=c89]
// * GNU89: Accept ISO C90 and GNU extensions. [-std=gnu89]
// * C99: Accept ISO C99 (1999), but not GNU extensions. [-std=c99]
// * GNU99: Accept ISO C99 and GNU extensions. [-std=gnu99]
// * C11: Accept ISO C11 (2011), but not GNU extensions. [-std=c11]
// * GNU11: Accept ISO C11 and GNU extensions. [-std=gnu11]
// * C17: Accept ISO C17 (2018), but not GNU extensions. [-std=c17]
// * GNU17: Accept ISO C17 and GNU extensions. [-std=gnu11]
// * Compiler Default: Tells the compiler to use its default C language dialect. This
// is normally the best choice unless you have specific needs. (Currently equivalent to
// GNU99.)

//GCC_C_LANGUAGE_STANDARD = C89


//********************************************//
//*   Apple Clang Module Verifier - Options  *//
//********************************************//


// Enable Module Verifier
//
// If enabled, the build system will use the Apple Clang Module Verifier to perform
// additional checks on module imports and usage. This can help identify issues with
// module boundaries and conform to supported language standards.

//ENABLE_MODULE_VERIFIER = YES


// Module Verifier Supported Language Standards
//
// Specifies which C and C++ language standards the module verifier will recognize
// and work with. Compatibility with these standards must be maintained for module
// verification to succeed.

//MODULE_VERIFIER_SUPPORTED_LANGUAGE_STANDARDS = c89 gnu++20


// Module Verifier Supported Languages
//
// Lists the programming languages for which the module verifier can perform its
// checks. Only these languages will be subject to verification.

//MODULE_VERIFIER_SUPPORTED_LANGUAGES = objective-c objective-c++


//********************************************//
//*   Static Analysis - Issues - Security    *//
//********************************************//


// Warn on Insecure rand() API Usage
//
// If enabled, the Clang Static Analyzer will provide warnings for uses of the
// insecure `rand()` function from the C standard library. This is part of security
// checks to encourage the usage of more secure alternatives such as `arc4random()`
// or `random()`, which offer better randomness properties suitable for cryptographic
// use cases.

//CLANG_ANALYZER_SECURITY_INSECUREAPI_RAND = YES


//********************************************//
//*       Framework-specific settings        *//
//********************************************//


// Dynamic Library Install Name Base
//
// Sets the base value for the internal `install path` (`LC_ID_DYLIB`) in a dynamic
// library. This will be combined with the `EXECUTABLE_PATH` to form the full install
// path. Setting `LD_DYLIB_INSTALL_NAME` directly will override this setting. This
// setting defaults to the target's `INSTALL_PATH`. It is ignored when building any
// product other than a dynamic library.

//DYLIB_INSTALL_NAME_BASE = @rpath