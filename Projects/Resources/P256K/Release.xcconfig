//
// Release.xcconfig
//
// Generated by BuildSettingExtractor on 1/22/25
// https://buildsettingextractor.com
//


#include "Shared.xcconfig"


//********************************************//
//*              Architectures               *//
//********************************************//


// Build Active Architecture Only
//
// If enabled, only the active architecture is built. This setting will be ignored when
// building with a run destination which does not define a specific architecture, such as
// a 'Generic Device' run destination.

ONLY_ACTIVE_ARCH = NO


//********************************************//
//*              Build Options               *//
//********************************************//


// Debug Information Format
// 
// The type of debug information to produce.
// 
// * DWARF: Object files and linked products will use DWARF as the debug information
// format. [dwarf]
// * DWARF with dSYM File: Object files and linked products will use DWARF as the debug
// information format, and Xcode will also produce a dSYM file containing the debug
// information from the individual object files (except that a dSYM file is not needed
// and will not be created for static library or object file products). [dwarf-with-dsym]

DEBUG_INFORMATION_FORMAT = dwarf-with-dsym


// Enable Testability
// 
// Enabling this setting will build the target with options appropriate for running
// automated tests against its product.
// 
// This setting can be enabled when building targets for debugging if their products will
// be tested. This may result in tests running slower than otherwise.
// 
// When this setting is enabled:
// 
// * `GCC_SYMBOLS_PRIVATE_EXTERN` is disabled (`-fvisibility=hidden` will not be passed
// to `clang`).
// * `-enable-testing` is passed to the Swift compiler.
// * `-export_dynamic` is passed to the linker.
// * `STRIP_INSTALLED_PRODUCT` is disabled (`strip` will not be run on the produced
// binary).

ENABLE_TESTABILITY = NO


// Validate Built Product
// 
// If enabled, perform validation checks on the product as part of the build process.

VALIDATE_PRODUCT = YES


//********************************************//
//*               Deployment                 *//
//********************************************//


// Skip Install
// 
// If enabled, don't install built products even if deployment locations are active.

SKIP_INSTALL = NO

// Build Library for Distribution
// 
// Enables Swift's Library Evolution mode, which generates .swiftinterface files.
// This allows clients to use the library even when compiled with different Swift versions.

BUILD_LIBRARY_FOR_DISTRIBUTION = YES


//********************************************//
//*      Apple Clang - Code Generation       *//
//********************************************//


// Optimization Level
// 
// Specifies the degree to which the generated code is optimized for speed and binary
// size.
// 
// * None: Do not optimize. [-O0]
// With this setting, the compiler's goal is to reduce the cost of compilation and to
// make debugging produce the expected results. Statements are independentâ€”if you stop
// the program with a breakpoint between statements, you can then assign a new value to
// any variable or change the program counter to any other statement in the function and
// get exactly the results you would expect from the source code.
// * Fast: Optimizing compilation takes somewhat more time, and a lot more memory for a
// large function. [-O1]
// With this setting, the compiler tries to reduce code size and execution time,
// without performing any optimizations that take a great deal of compilation time. In
// Apple's compiler, strict aliasing, block reordering, and inter-block scheduling are
// disabled by default when optimizing.
// * Faster: The compiler performs nearly all supported optimizations that do not
// involve a space-speed tradeoff. [-O2]
// With this setting, the compiler does not perform loop unrolling or function
// inlining, or register renaming. As compared to the `Fast` setting, this setting
// increases both compilation time and the performance of the generated code.
// * Fastest: Turns on all optimizations specified by the `Faster` setting and also
// turns on function inlining and register renaming options. This setting may result in a
// larger binary. [-O3]
// * Fastest, Smallest: Optimize for size. This setting enables all `Faster`
// optimizations that do not typically increase code size. It also performs further
// optimizations designed to reduce code size. [-Os]
// * Fastest, Aggressive Optimizations: This setting enables `Fastest` but also enables
// aggressive optimizations that may break strict standards compliance but should work
// well on well-behaved code. [-Ofast]
// * Smallest, Aggressive Size Optimizations: This setting enables additional size
// savings by isolating repetitive code patterns into a compiler generated function.
// [-Oz]

GCC_OPTIMIZATION_LEVEL = s


//********************************************//
//*       Apple Clang - Preprocessing        *//
//********************************************//


// Enable Foundation Assertions
// 
// Controls whether assertion logic provided by `NSAssert` is included in the
// preprocessed source code or is elided during preprocessing. Disabling assertions can
// improve code performance.

ENABLE_NS_ASSERTIONS = NO


// Preprocessor Macros
//
// Space-separated list of preprocessor macros of the form foo or foo=bar.

GCC_PREPROCESSOR_DEFINITIONS = 
