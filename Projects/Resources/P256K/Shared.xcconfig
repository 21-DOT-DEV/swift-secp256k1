//
// Shared.xcconfig
//
// Generated by BuildSettingExtractor on 1/22/25
// https://buildsettingextractor.com
//


//********************************************//
//*              Build Options               *//
//********************************************//


// Allow Multi-Platform Builds
// 
// If enabled, allows targets to build multiple times within a single build operation.
// Targets will build for the platform of the active run destination, as well as the
// platforms of any targets which depend on them.

ALLOW_TARGET_PLATFORM_SPECIALIZATION = YES


// User Script Sandboxing
// 
// If enabled, the build system will sandbox user scripts to disallow undeclared
// input/output dependencies.

ENABLE_USER_SCRIPT_SANDBOXING = YES


//********************************************//
//*               Deployment                 *//
//********************************************//


// Targeted Device Families
// 
// Comma-separated list of integers corresponding to device families supported by this
// target.
// 
// The build system uses this information to set the correct value for the
// `UIDeviceFamily` key it adds to the target's `Info.plist` file. Values inapplicable to
// the current platform will be removed automatically. This also drives the
// `--target-device` flag to actool, which determines the idioms selected during catalog
// compilation.
// 
// Possible values include:
// * *1*: iPhone, iPod touch
// * *2*: iPad, Mac Catalyst using "Scaled to Match iPad" Interface
// * *3*: Apple TV
// * *4*: Apple Watch
// * *6*: Mac Catalyst using "Optimize for Mac" Interface
// * *7*: Apple Vision

TARGETED_DEVICE_FAMILY = 1,2,3,4,5,6,7


//********************************************//
//*             Linking General              *//
//********************************************//


// Compatibility Version
// 
// Determines the compatibility version of the resulting library, bundle, or framework
// binary. See [Dynamic Library Design
// Guidelines](https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/DynamicLibraries/100-Articles/DynamicLibraryDesignGuidelines.html#//apple_ref/doc/uid/TP40002013-SW19)
// in [Dynamic Library Programming
// Topics](https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/DynamicLibraries/000-Introduction/Introduction.html)
// for details on assigning version numbers of dynamic libraries.

DYLIB_COMPATIBILITY_VERSION = 1


// Current Library Version
// 
// This setting defines the current version of any framework built by the project. As
// with `CURRENT_PROJECT_VERSION`, the value must be an integer or floating point number,
// such as `57` or `365.8`. See [Dynamic Library Design
// Guidelines](https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/DynamicLibraries/100-Articles/DynamicLibraryDesignGuidelines.html#//apple_ref/doc/uid/TP40002013-SW19)
// in [Dynamic Library Programming
// Topics](https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/DynamicLibraries/000-Introduction/Introduction.html)
// for details on assigning version numbers of dynamic libraries.

DYLIB_CURRENT_VERSION = 1


// Dynamic Library Install Name
//
// Sets the value for the internal `install path` (`LC_ID_DYLIB`) in a dynamic
// library. This will be combined with the `EXECUTABLE_PATH` to form the full install
// path. Setting this directly will override any other settings that affect it.
// This setting defaults to the target's `INSTALL_PATH`. It is ignored when building
// any product other than a dynamic library.

LD_DYLIB_INSTALL_NAME = $(DYLIB_INSTALL_NAME_BASE:standardizepath)/$(EXECUTABLE_PATH)


// Dynamic Library Install Name Base
//
// Sets the base value for the internal `install path` (`LC_ID_DYLIB`) in a dynamic
// library. This will be combined with the `EXECUTABLE_PATH` to form the full install
// path. Setting `LD_DYLIB_INSTALL_NAME` directly will override this setting. This
// setting defaults to the target's `INSTALL_PATH`. It is ignored when building any
// product other than a dynamic library.

DYLIB_INSTALL_NAME_BASE = @rpath


// Generate Position-Independent Executable (PIE)
//
// When enabled, the linker produces a position-independent executable (PIE).
// PIE executables have address space layout randomization (ASLR) enabled, which
// enhances security by randomizing the memory addresses used by the program,
// making it more difficult for attackers to predict the location of specific
// functions within the code. Setting this to `NO` means the resulting executable
// will not be position-independent.

LD_NO_PIE = NO


//********************************************//
//*               Packaging                  *//
//********************************************//


// Defines Module
// 
// If enabled, the product will be treated as defining its own module. This enables
// automatic production of LLVM module map files when appropriate, and allows the product
// to be imported as a module.

DEFINES_MODULE = YES


// Product Name
//
// This is the basename of the product generated by the target.
//
// When `GENERATE_INFOPLIST_FILE` is enabled, sets the value of the
// [CFBundleName](https://developer.apple.com/documentation/bundleresources/information_property_list/cfbundlename)
// key in the `Info.plist` file to the value of this build setting.

PRODUCT_NAME = $(TARGET_NAME:c99extidentifier)


// Strings File Output Encoding
//
// Specify the output encoding to be used for Strings files - the
// default is UTF-16. The value can be either an NSStringEncoding,
// such as one of the numeric values recognized by NSString, or an
// IANA character set name as understood by CFString. It is
// recommended that the source file be in UTF-8 encoding, which is
// the default encoding for standard strings files, and Xcode will
// automatically process it to the output encoding. Processing
// will fail if the file cannot be converted to the specified encoding.

STRINGS_FILE_OUTPUT_ENCODING = binary


//********************************************//
//*               Versioning                 *//
//********************************************//


// Current Project Version
// 
// This setting defines the current version of the project. The value must be a integer
// or floating point number, such as `57` or `365.8`.
// 
// When `GENERATE_INFOPLIST_FILE` is enabled, sets the value of the
// [CFBundleVersion](https://developer.apple.com/documentation/bundleresources/information_property_list/cfbundleversion)
// key in the `Info.plist` file to the value of this build setting.

CURRENT_PROJECT_VERSION = 1


// Marketing Version
// 
// This setting defines the user-visible version of the project.
// 
// When `GENERATE_INFOPLIST_FILE` is enabled, sets the value of the
// [CFBundleShortVersionString](https://developer.apple.com/documentation/bundleresources/information_property_list/cfbundleshortversionstring)
// key in the `Info.plist` file to the value of this build setting.

MARKETING_VERSION = 1.0


// Versioning System
// 
// Selects the process used for version-stamping generated files.
// 
// * None: Use no versioning system.
// * Apple Generic: Use the current project version setting. [apple-generic]
// * Apple Generic (Hidden Symbols): Use the current project version setting with
// hidden-visibility symbols. [apple-generic-hidden]

VERSIONING_SYSTEM = apple-generic


//********************************************//
//*   Apple Clang Module Verifier - Options  *//
//********************************************//


// Enable Module Verifier
//
// If enabled, the build system will use the Apple Clang Module Verifier to perform
// additional checks on module imports and usage. This can help identify issues with
// module boundaries and conform to supported language standards.

ENABLE_MODULE_VERIFIER = YES


// Module Verifier Supported Language Standards
//
// Specifies which C and C++ language standards the module verifier will recognize
// and work with. Compatibility with these standards must be maintained for module
// verification to succeed.

MODULE_VERIFIER_SUPPORTED_LANGUAGE_STANDARDS = gnu99 gnu++20


// Module Verifier Supported Languages
//
// Lists the programming languages for which the module verifier can perform its
// checks. Only these languages will be subject to verification.

MODULE_VERIFIER_SUPPORTED_LANGUAGES = objective-c objective-c++


//********************************************//
//*         Swift Compiler - General         *//
//********************************************//


// Install Generated Header
//
// For frameworks, install the C++/Objective-C generated header describing bridged
// Swift types into the PUBLIC_HEADERS_FOLDER_PATH so they may be accessed from
// Objective-C or C++ code using the framework. Defaults to YES.

SWIFT_INSTALL_OBJC_HEADER = YES


//********************************************//
//*   Static Analysis - Issues - Security    *//
//********************************************//


// Warn on Insecure rand() API Usage
//
// If enabled, the Clang Static Analyzer will provide warnings for uses of the
// insecure `rand()` function from the C standard library. This is part of security
// checks to encourage the usage of more secure alternatives such as `arc4random()`
// or `random()`, which offer better randomness properties suitable for cryptographic
// use cases.

CLANG_ANALYZER_SECURITY_INSECUREAPI_RAND = YES
