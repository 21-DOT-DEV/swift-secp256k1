---
format_version: '11'
default_step_lib_source: 'https://github.com/bitrise-io/bitrise-steplib.git'
project_type: other
meta:
  bitrise.io:
    stack: osx-xcode-16.2.x
    machine_type_id: g2.mac.medium
trigger_map:
- push_branch: main
  pipeline: PIPELINE-P256K-ZKP
- pull_request_source_branch: '*'
  pipeline: PIPELINE-P256K-ZKP
pipelines:  
  PIPELINE-P256K-ZKP:
    stages:
    - CLONE: {}
    - P256K: {}
    - ZKP: {}
stages:
  CLONE:
    workflows:
    - SWIFT-SECP256K1: {}
  P256K:
    workflows:
    - BUILD-P256K: {}
  ZKP:
    workflows:
    - BUILD-ZKP: {}
workflows:
  SWIFT-SECP256K1:
    steps:
    - git-clone:
        title: CLONE SWIFT-SECP256K1
        timeout: 60
    - script:
        title: CHECK LINKS
        timeout: 60
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails; debug log
            set -ex
            
            # This command finds broken symbolic links in a directory and subdirectories.
            # It uses the find command to follow symbolic links and checks if they are
            # broken with the test command. If a broken symbolic link is found, the
            # script fails with a non-zero status code.
            broken_links=$(find . -type d -name .build -prune -o -type l ! -exec test -e {} \; -print)
            if [ -n "$broken_links" ]; then
              echo "Broken symbolic links found:"
              echo "$broken_links"
              exit 1
            fi
    - script:
        title: CHECK iOS
        timeout: 120
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails; debug log
            set -ex

            xcrun xcodebuild -skipMacroValidation -skipPackagePluginValidation build -scheme swift-secp256k1-Package -destination generic/platform=iOS
    - script:
        title: CHECK tvOS
        timeout: 120
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails; debug log
            set -ex

            xcrun xcodebuild -skipMacroValidation -skipPackagePluginValidation build -scheme swift-secp256k1-Package -destination generic/platform=tvOS
    - script:
        title: CHECK watchOS
        timeout: 120
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails; debug log
            set -ex

            xcrun xcodebuild -skipMacroValidation -skipPackagePluginValidation build -scheme swift-secp256k1-Package -destination generic/platform=watchOS
    - script:
        title: CHECK visionOS
        run_if: false
        timeout: 120
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails; debug log
            set -ex

            xcrun xcodebuild -skipMacroValidation -skipPackagePluginValidation build -scheme swift-secp256k1-Package -destination generic/platform=visionOS
    - deploy-to-bitrise-io:
        inputs:
        - pipeline_intermediate_files: "$BITRISE_SOURCE_DIR:BITRISE_SOURCE_DIR"
  BUILD-ZKP:
    before_run:
    - PULL-PACKAGE-FILES
    steps:
    - script:
        title: BUILD ZKP
        timeout: 360
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails; debug log
            set -ex

            swift test
  BUILD-P256K:
    before_run:
    - PULL-PACKAGE-FILES
    steps:
    - script:
        title: BUILD & TEST P256K
        timeout: 360
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails; debug log
            set -ex

            # Swift Package Manager commands with Tuist operations for CI/CD pipeline:

            # 1. Generate Xcode project:
            # The command generates an Xcode project using Tuist for the project configuration located in the 'Projects/' directory.
            swift package --disable-sandbox tuist generate -p Projects/ --no-open && \

            # 2. Build iOS target:
            # Builds the 'P256K' target for the iOS platform using the Tuist project configuration from 'Projects/'.
            swift package --disable-sandbox tuist build P256K -p Projects/ --platform ios && \

            # 3. Run iOS tests:
            # Executes tests for 'XCFramework-Workspace' on the iOS platform using the Tuist setup from 'Projects/'.
            swift package --disable-sandbox tuist test XCFramework-Workspace -p Projects/ --platform ios
    - script:
        title: ARCHIVE & CREATE XCFRAMEWORK
        timeout: 720
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails; debug log
            set -ex

            # Define workspace and scheme
            WORKSPACE='Projects/XCFramework.xcworkspace'
            SCHEME='P256K'
            CONFIGURATION='Release'
            ARCHIVE_DIR='Archives'

            # Platforms to archive
            PLATFORMS=(
              "iOS"
              "iOS Simulator"
              "macOS"
              "tvOS"
              "tvOS Simulator"
              "watchOS"
              "watchOS Simulator"
            # "visionOS"
            # "XR Simulator"
            )

            # Loop over platforms and archive for each one
            for PLATFORM in "${PLATFORMS[@]}"; do
              echo "Archiving for $PLATFORM..."

              # Run xcodebuild archive for each platform
              xcodebuild archive \
                -workspace "$WORKSPACE" \
                -scheme "$SCHEME" \
                -configuration "$CONFIGURATION" \
                -destination "generic/platform=$PLATFORM" \
                -archivePath "$ARCHIVE_DIR/P256K-$PLATFORM.xcarchive"| xcbeautify

              # Check if archive command was successful
              if [ $? -eq 0 ]; then
                echo "$PLATFORM archive created successfully."
              else
                echo "Failed to archive for $PLATFORM. Exiting."
                exit 1
              fi
            done

            echo "All archives completed successfully."

            # Create an XCFramework to support multiple platforms and architectures
            # Each -archive parameter specifies a path to a .xcarchive built for a different platform
            # -framework specifies the framework within those archives to include in the XCFramework
            # The -output parameter specifies the name and location of the XCFramework to be created
            xcodebuild -create-xcframework \
              -archive "Archives/P256K-iOS.xcarchive" -framework P256K.framework \
              -archive "Archives/P256K-iOS Simulator.xcarchive" -framework P256K.framework \
              -archive "Archives/P256K-macOS.xcarchive" -framework P256K.framework \
              -archive "Archives/P256K-tvOS.xcarchive" -framework P256K.framework \
              -archive "Archives/P256K-tvOS Simulator.xcarchive" -framework P256K.framework \
              -archive "Archives/P256K-watchOS.xcarchive" -framework P256K.framework \
              -archive "Archives/P256K-watchOS Simulator.xcarchive" -framework P256K.framework \
              -output P256K.xcframework

            # Workaround for Swift issue SR-14195/GitHub #56573:
            # When a module has the same name as a type it contains (P256K in this case),
            # Swift generates invalid module interfaces with incorrect type qualifications.
            # This leads to imports failing with errors like:
            # "TypeName is not a member type of class ModuleName.ModuleName"
            #
            # This script fixes generated .swiftinterface files by:
            # 1. Removing double-qualification of the P256K type
            # 2. Fixing references to other types that don't need module qualification
            # See: https://github.com/swiftlang/swift/issues/56573
            find P256K.xcframework -name '*.swiftinterface' -print0 \
              | xargs -0 sed -i '' \
                  -e 's/extension P256K\.P256K/extension P256K/g' \
                  -e 's/P256K\.P256K\./P256K\./g' \
                  -e 's/[[:<:]]P256K\.secp256k1Error[[:>:]]/secp256k1Error/g' \
                  -e 's/[[:<:]]P256K\.Digest[[:>:]]/Digest/g' \
                  -e 's/[[:<:]]P256K\.CryptoKitError[[:>:]]/CryptoKitError/g' \
                  -e 's/[[:<:]]P256K\.CryptoKitASN1Error[[:>:]]/CryptoKitASN1Error/g' \
                  -e 's/[[:<:]]P256K\.SHA256Digest[[:>:]]/SHA256Digest/g' \
                  -e 's/[[:<:]]P256K\.XonlyKeyImplementation[[:>:]]/XonlyKeyImplementation/g' \
                  -e 's/[[:<:]]P256K\.HashDigest[[:>:]]/HashDigest/g' \
                  -e 's/[[:<:]]P256K\.SharedSecret[[:>:]]/SharedSecret/g' \
                  -e 's/[[:<:]]P256K\.PublicKeyImplementation[[:>:]]/PublicKeyImplementation/g' \
                  -e 's/[[:<:]]P256K\.PrivateKeyImplementation[[:>:]]/PrivateKeyImplementation/g' \
                  -e 's/[[:<:]]P256K\.UInt256[[:>:]]/UInt256/g' \
                  -e 's/[[:<:]]P256K\.Int256[[:>:]]/Int256/g' \
                  -e 's/[[:<:]]P256K\.UInt128[[:>:]]/UInt128/g' \
                  -e 's/[[:<:]]P256K\.Int128[[:>:]]/Int128/g' \
                  -e 's/[[:<:]]P256K\.SIMDWordsInteger[[:>:]]/SIMDWordsInteger/g' \
                  -e 's/[[:<:]]P256K\.SIMDWrapper[[:>:]]/SIMDWrapper/g' \
                  -e 's/[[:<:]]P256K\.Vector[[:>:]]/Vector/g'
    - deploy-to-bitrise-io:
        inputs:
        - deploy_path: "$BITRISE_SOURCE_DIR/P256K.xcframework"
        - is_compress: true
    - script:
        title: TEST XCFRAMEWORK
        timeout: 360
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails; debug log
            set -ex

            # Comment out the existing target for "P256K" in the Package.swift file.
            sed -i '' '/\.target(name: "P256K", dependencies: \["libsecp256k1"\]),/s/^/\/\//g' Package.swift

            # Add the new target for "P256K" in the Package.swift file.
            sed -i '' '/\.target(name: "P256K", dependencies: \["libsecp256k1"\]),/a\
                .binaryTarget(\
                    name: "P256K",\
                    path: "./P256K.xcframework"\
                ),\
            ' Package.swift

            # Update the ZKPTests target to XCFrameworkTests and use the binary target for "P256K" in the manifest file.
            sed -i '' \
              -e 's/\.testTarget(name: "libsecp256k1zkpTests", dependencies: \["ZKP", "libsecp256k1_zkp"\]),/\/\/ .testTarget(name: "libsecp256k1zkpTests", dependencies: ["ZKP", "libsecp256k1_zkp"]),/' \
              -e 's/\.testTarget(name: "ZKPTests", dependencies: \["ZKP"\])/\.testTarget(name: "XCFrameworkTests", dependencies: \["P256K"\])/' \
              Package.swift

            # Run swift tests after modifying the Package.swift, allowing verification 
            # of the setup with the newly integrated XCFramework.
            swift test
  PULL-PACKAGE-FILES:
    steps:
    - pull-intermediate-files:
        inputs:
        - artifact_sources: CLONE.SWIFT-SECP256K1
