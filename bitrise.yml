---
format_version: '11'
default_step_lib_source: 'https://github.com/bitrise-io/bitrise-steplib.git'
project_type: other
meta:
  bitrise.io:
    stack: osx-xcode-16.2.x
    machine_type_id: g2-m1.4core
trigger_map:
- push_branch: main
  pipeline: PIPELINE-P256K-ZKP
- pull_request_source_branch: '*'
  pipeline: PIPELINE-P256K-ZKP
pipelines:  
  PIPELINE-P256K-ZKP:
    stages:
    - CLONE: {}
    - P256K: {}
    - ZKP: {}
stages:
  CLONE:
    workflows:
    - SWIFT-SECP256K1: {}
  P256K:
    workflows:
    - BUILD-P256K: {}
  ZKP:
    workflows:
    - BUILD-ZKP: {}
workflows:
  SWIFT-SECP256K1:
    steps:
    - git-clone:
        title: CLONE SWIFT-SECP256K1
        timeout: 60
    - script:
        title: CHECK LINKS
        timeout: 20
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails; debug log
            set -ex
            
            # This command finds broken symbolic links in a directory and subdirectories.
            # It uses the find command to follow symbolic links and checks if they are
            # broken with the test command. If a broken symbolic link is found, the
            # script fails with a non-zero status code.
            broken_links=$(find . -type d -name .build -prune -o -type l ! -exec test -e {} \; -print)
            if [ -n "$broken_links" ]; then
              echo "Broken symbolic links found:"
              echo "$broken_links"
              exit 1
            fi
    - deploy-to-bitrise-io:
        inputs:
        - pipeline_intermediate_files: "$BITRISE_SOURCE_DIR:BITRISE_SOURCE_DIR"
  BUILD-ZKP:
    before_run:
    - PULL-PACKAGE-FILES
    steps:
    - script:
        title: BUILD ZKP
        timeout: 360
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails; debug log
            set -ex

            swift test
  BUILD-P256K:
    before_run:
    - PULL-PACKAGE-FILES
    steps:
    - script:
        title: BUILD & TEST P256K
        timeout: 360
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails; debug log
            set -ex

            # Swift Package Manager commands with Tuist operations for CI/CD pipeline:

            # 1. Generate Xcode project:
            # The command generates an Xcode project using Tuist for the project configuration located in the 'Projects/' directory.
            swift package --disable-sandbox tuist generate -p Projects/ && \

            # 2. Build iOS target:
            # Builds the 'P256K' target for the iOS platform using the Tuist project configuration from 'Projects/'.
            swift package --disable-sandbox tuist build P256K -p Projects/ --platform ios && \

            # 3. Run iOS tests:
            # Executes tests for 'XCFramework-Workspace' on the iOS platform using the Tuist setup from 'Projects/'.
            swift package --disable-sandbox tuist test XCFramework-Workspace -p Projects/ --platform ios
    - script:
        title: ARCHIVE & CREATE XCFRAMEWORK
        timeout: 360
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails; debug log
            set -ex

            # Define workspace and scheme
            WORKSPACE='Projects/XCFramework.xcworkspace'
            SCHEME='P256K'
            CONFIGURATION='Release'
            ARCHIVE_DIR='Archives'

            # Platforms to archive
            PLATFORMS=(
              "iOS"
              "macOS"
              "watchOS"
              "tvOS"
            #  "visionOS"
            )

            # Loop over platforms and archive for each one
            for PLATFORM in "${PLATFORMS[@]}"; do
              echo "Archiving for $PLATFORM..."

              # Run xcodebuild archive for each platform
              xcodebuild archive \
                -workspace "$WORKSPACE" \
                -scheme "$SCHEME" \
                -configuration "$CONFIGURATION" \
                -destination "generic/platform=$PLATFORM" \
                -archivePath "$ARCHIVE_DIR/P256K-$PLATFORM.xcarchive"  | xcbeautify

              # Check if archive command was successful
              if [ $? -eq 0 ]; then
                echo "$PLATFORM archive created successfully."
              else
                echo "Failed to archive for $PLATFORM. Exiting."
                exit 1
              fi
            done

            echo "All archives completed successfully."
  PULL-PACKAGE-FILES:
    steps:
    - pull-intermediate-files:
        inputs:
        - artifact_sources: CLONE.SWIFT-SECP256K1
